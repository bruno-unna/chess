Original source: https://chessprogramming.wikispaces.com/Extended%20Position%20Description


Like FEN, Extended Position Description (EPD) describes a chess position. Unlike FEN, EPD is designed to be expandable by the addition of new operations. EPD was developed by John Stanback and Steven Edwards. Its first implementation is in Stanback's chessplaying program Zarkov. Steven Edwards specified the EPD standard for computer chess applications as part of the Portable Game Notation [1].

EPD Syntax
One EPD string or record consists of one text line of variable length composed of four fields separated by a space character followed by zero or more operations. The four data fields, which describe the position, are common with the FEN-Specification.

Terminal and none terminal symbols of a variant of BNF below are embedded in ' ' resp. < >.

<EPD> ::=  <Piece Placement>
       ' ' <Side to move>
       ' ' <Castling ability>
       ' ' <En passant target square>
      {' ' <operation>}


Piece Placement
The Piece Placement is determined rank by rank in big-endian order, that is starting at the 8th rank down to the first rank. Each rank is separated by the terminal symbol '/' (slash). One rank, scans piece placement in little-endian file-order from the A to H.
A decimal digit counts consecutive empty squares, the pieces are identified by a single letter from standard English names for chess pieces as used in the Algebraic chess notation. Uppercase letters are for white pieces, lowercase letters for black pieces.

<Piece Placement> ::= <rank8>'/'<rank7>'/'<rank6>'/'<rank5>'/'<rank4>'/'<rank3>'/'<rank2>'/'<rank1>
<ranki>       ::= [<digit17>]<piece> {[<digit17>]<piece>} [<digit17>] | '8'
<piece>       ::= <white Piece> | <black Piece>
<digit17>     ::= '1' | '2' | '3' | '4' | '5' | '6' | '7'
<white Piece> ::= 'P' | 'N' | 'B' | 'R' | 'Q' | 'K'
<black Piece> ::= 'p' | 'n' | 'b' | 'r' | 'q' | 'k'


Side to move
Side to move is one lowercase letter for either White ('w') or Black ('b').

<Side to move> ::= {'w' | 'b'}


Castling ability
If neither side can castle, the symbol '-' is used, otherwise each of four individual castling rights for king and queen castling for both sides are indicated by a sequence of one to four letters.

<Castling ability> ::= '-' | ['K'] ['Q'] ['k'] ['q'] (1..4)


En passant target square
The en passant target square is specified after a double push of a pawn, no matter whether an en passant capture is really possible or not. Other moves than double pawn pushes imply the symbol '-' for this FEN field.

<En passant target square> ::= '-' | <epsquare>
<epsquare>   ::= <fileLetter> <eprank>
<fileLetter> ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h'
<eprank>     ::= '3' | '6'


Operations

<operation> ::= <opcode> {' '<operand>} ';'
<opcode>    ::= <letter> {<letter> | <digit> | '_'} (up to 14)
<operand>   ::= <stringOperand>
              | <sanMove>
              | <unsignedOperand>
              | <integerOperand>
              | <floatOperand>
 
<stringOperand>  ::= '"' {<char>} '"'
 
<sanMove>        ::= <PieceCode> [<Disambiguation>] <targetSquare> [<promotion>] ['+'|'#']
                   | <castles>
<castles>        ::= 'O-O' | 'O-O-O' (upper case O, not zero)
<PieceCode>      ::= '' | 'N' | 'B' | 'R' | 'Q' | 'K'
<Disambiguation> ::= <fileLetter> | <digit18>
<targetSquare>   ::= <fileLetter> <digit18>
<fileLetter> ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h'
<promotion>      ::=  '=' <PiecePromotion>
<PiecePromotion> ::= 'N' | 'B' | 'R' | 'Q'
 
<unsignedOperand>::= <digit19> { <digit> } | '0'
<integerOperand> ::= ['-' | '+'] <unsignedIntegerOperand>
<floatOperand>   ::= <integerOperand> '.' <digit> {<digit>}
<digit18> ::= '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'
<digit19> ::= '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
<digit>   ::= '0' | <digit19>


Opcode mnemonics

    acd analysis count depth [2]
    acn analysis count nodes
    acs analysis count seconds
    am avoid move(s)
    bm best move(s)
    c0 comment (primary, also c1 though c9)
    ce centipawn evaluation
    dm direct mate fullmove count
    draw_accept accept a draw offer
    draw_claim claim a draw
    draw_offer offer a draw
    draw_reject reject a draw offer
    eco Encyclopedia of Chess Openings opening code
    fmvn fullmove number
    hmvc halfmove clock
    id position identification
    nic New In Chess opening code
    noop no operation
    pm predicted move
    pv predicted variation
    rc repetition count
    resign game resignation
    sm supplied move
    tcgs telecommunication game selector
    tcri telecommunication receiver identification
    tcsi telecommunication sender identification
    v0 variation name (primary, also v1 though v9)


